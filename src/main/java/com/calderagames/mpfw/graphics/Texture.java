package com.calderagames.mpfw.graphics;

import java.awt.image.BufferedImage;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.nio.ByteBuffer;

import org.lwjgl.BufferUtils;
import org.lwjgl.opengl.GL11;
import org.lwjgl.opengl.GL13;
import org.lwjgl.opengl.GL30;

import com.calderagames.mpfw.Disposable;
import com.calderagames.mpfw.MPFW;

import de.matthiasmann.twl.utils.PNGDecoder;
import de.matthiasmann.twl.utils.PNGDecoder.Format;

public class Texture implements Disposable{

	/**Width of the texture*/
	private int width;
	/**Height of the texture*/
	private int height;
	/**Id of the texture generated by openGL*/
	private int id;
	/**File path of the texture, for loading/reloading*/
	private String filePath;
	/**Texture filter, see {@link MPFW#MPFW_NEAREST}*/
	private int filter;
	/**Boolean flag that states if the texture is loaded*/
	private boolean loaded;
	
	/**
	 * Constructs a texture with the provided texture filter (See: {@link MPFW#MPFW_NEAREST})
	 * and texture unit (See: {@link MPFW#MPFW_TEXTURE0}). The constructor checks the file path, decode
	 * the file and stores the width and height of the texture but doesn't load the texture into memory,
	 * use {@link #load()} for that.
	 * @param filePath path to the texture
	 * @param filter texture filter, see {@link MPFW#MPFW_NEAREST}
	 */
	public Texture(String filePath, int filter) {
		this.filePath = filePath;
		this.filter = filter;

		try {
			//Open file input stream
			InputStream in = new FileInputStream(filePath);
			//Decode the file
			PNGDecoder decoder = new PNGDecoder(in);
			//Get width and height
			width = decoder.getWidth();
			height = decoder.getHeight();
			//Close the steam
			in.close();
		} catch(IOException e) {
			e.printStackTrace();
		}			
	}

	/**
	 * Constructs a texture from a BufferedImage with the provided texture filter (See: {@link MPFW#MPFW_NEAREST})
	 * and texture unit (See: {@link MPFW#MPFW_TEXTURE0}), generate an openGL texture 2D and load it into memory.
	 * @param image BufferedImage to convert
	 * @param filePath path to the texture
	 * @param filter texture filter, see {@link MPFW#MPFW_NEAREST}
	 */
	public Texture(BufferedImage image, int filter) {
		width = image.getWidth();
		height = image.getHeight();
		this.filter = filter;

		int[] pixels = new int[image.getWidth() * image.getHeight()];
		image.getRGB(0, 0, image.getWidth(), image.getHeight(), pixels, 0, image.getWidth());

		ByteBuffer buffer = BufferUtils.createByteBuffer(image.getWidth() * image.getHeight() * 4); //4 for RGBA, 3 for RGB

		for(int y = 0; y < image.getHeight(); y++) {
			for(int x = 0; x < image.getWidth(); x++) {
				int pixel = pixels[y * image.getWidth() + x];
				buffer.put((byte) ((pixel >> 16) & 0xFF)); //Red component
				buffer.put((byte) ((pixel >> 8) & 0xFF)); //Green component
				buffer.put((byte) (pixel & 0xFF)); // Blue component
				buffer.put((byte) ((pixel >> 24) & 0xFF)); //Alpha component. Only for RGBA
			}
		}

		genTexture(buffer);

		loaded = true;
	}
	
	/**
	 * Constructs a texture from an existing openGL texture 2D. 
	 * The width, height and filter are retrieved from the openGL context.
	 * Be aware this method perform a glBindTexture call.
	 * @param textureId generated openGL id
	 * @param width the width of the texture
	 * @param height the height of the texture
	 * @param filter texture filter, see {@link MPFW#MPFW_NEAREST}
	 */
	public Texture(int textureId, int texUnit) {
		filePath = "null";
		id = textureId;
	
		GL11.glBindTexture(GL11.GL_TEXTURE_2D, id);
		this.width = GL11.glGetTexLevelParameteri(GL11.GL_TEXTURE_2D, 0, GL11.GL_TEXTURE_WIDTH);
		this.height = GL11.glGetTexLevelParameteri(GL11.GL_TEXTURE_2D, 0, GL11.GL_TEXTURE_HEIGHT);
		this.filter = GL11.glGetTexLevelParameteri(GL11.GL_TEXTURE_2D, 0, GL11.GL_TEXTURE_MAG_FILTER);
		GL11.glBindTexture(GL11.GL_TEXTURE_2D, 0);
		loaded = true;
	}
	
	/**Create openGL texture 2D and load it into memory*/
	public void load() {
		if(loaded)
			return;
		
		ByteBuffer buffer = null;

		try {
			//Open file input stream
			InputStream in = new FileInputStream(filePath);
			//Decode the file
			PNGDecoder decoder = new PNGDecoder(in);
			//Get width and height
			width = decoder.getWidth();
			height = decoder.getHeight();

			//Create buffer
			buffer = ByteBuffer.allocateDirect(4 * width * height);
			//Feed buffer with the decoded data
			decoder.decode(buffer, width * 4, Format.RGBA);
			
			//Close the stream
			in.close();
		} catch(IOException e) {
			e.printStackTrace();
		}

		//Generate texture 2D
		genTexture(buffer);

		loaded = true;
	}
	
	/**Generate an openGL texture id with a byte buffer and load it into memory
	 * @param buffer byte buffer containing the texture
	 */
	private void genTexture(ByteBuffer buffer) {
		//Flip the buffer
		buffer.flip();

		//Generate the id
		id = GL11.glGenTextures();
		//Set active texture
		GL13.glActiveTexture(GL13.GL_TEXTURE0);
		//Bind the texture
		GL11.glBindTexture(GL11.GL_TEXTURE_2D, id);
		
		//Texture 2D RGBA
		GL11.glPixelStorei(GL11.GL_UNPACK_ALIGNMENT, 1);
		GL11.glTexImage2D(GL11.GL_TEXTURE_2D, 0, GL11.GL_RGBA, width, height, 0, GL11.GL_RGBA, GL11.GL_UNSIGNED_BYTE, buffer);
		GL30.glGenerateMipmap(GL11.GL_TEXTURE_2D);

		//Set wrap parameter
		GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_WRAP_S, GL11.GL_REPEAT);
		GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_WRAP_T, GL11.GL_REPEAT);

		//Set texture filter
		GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MAG_FILTER, filter);
		GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MIN_FILTER, filter);

		//Unbind texture
		GL13.glActiveTexture(GL13.GL_TEXTURE0);
		GL11.glBindTexture(GL11.GL_TEXTURE_2D, 0);

		//Clear the buffer since we don't need it anymore
		buffer.clear();
	}
	
	/**
	 * Set the texture filter, if the same fitler is already set
	 * the method does nothing.
	 * Be aware this method perform a glBindTexture call.
	 * @param filter {@link MPFW#MPFW_NEAREST} or {@link MPFW#MPFW_LINEAR}
	 */
	public void setFilter(int filter) {
		if(this.filter == filter)
			return;
		
		this.filter = filter;
		
		GL11.glBindTexture(GL11.GL_TEXTURE_2D, id);
		GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MIN_FILTER, filter);
		GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MAG_FILTER, filter);
		GL11.glBindTexture(GL11.GL_TEXTURE_2D, 0);
	}
	
	/**Get the texture id generated by openGL*/
	public int getId() {
		return id;
	}
	
	/**Get the texture filter*/
	public int getFilter() {
		return filter;
	}
	
	/**Get the texture width*/
	public int getWidth() {
		return width;
	}
	/**Get the texture height*/
	public int getHeight() {
		return height;
	}

	/**Delete the texture and free the resources*/
	public void dispose() {
		GL11.glBindTexture(GL11.GL_TEXTURE_2D, 0);
		GL11.glDeleteTextures(id);
		id = 0;
		loaded = false;
	}
}
